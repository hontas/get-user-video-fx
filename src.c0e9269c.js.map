{"version":3,"sources":["node_modules/glfx/glfx.js","src/utils/color.js","src/utils/pixel.js","src/index.js"],"names":["rgbToHsl","r","g","b","max","h","s","Math","min","l","d","hslToRgb","hue2rgb","p","q","t","brightness","contrast","saturation","intercept","setBrightnessAndContrast","c","sat","red","green","blue","mix","sliders","brightnessAndContrast","value","saturate","colorUtils","strategies","grayScale","frame","strategy","imgData","output","data","allData","length","alpha","i","mixColors","similar","chromaColors","chromaKeyHSL","HSLThreshold","hKey","sKey","lKey","hThresh","sThresh","lThresh","hsl","hDiff","abs","sDiff","lDiff","glfxCanvas","glfxTexture","video","context","offScreenContext","width","height","colorMixerSliderElements","chromaKeySliderElements","adjustElements","form","colorInput","colorMixerValues","chromaKeyThreshold","adjustValues","chromaColor","colorMode","grayScaleStrategy","effectsEnabled","aspectRatio","init","window","innerWidth","document","querySelectorAll","getElementById","querySelector","canvas","getContext","offscreenCanvas","OffscreenCanvas","translate","scale","glfx","texture","insertAdjacentElement","addEventListener","toggleEffects","onReset","updateChromaColor","updateColorMode","updateGrayScaleStrategy","updateColorMixerValues","updateChromaKeyThreshold","updateBrightnessAndContarst","copyToCanvas","navigator","mediaDevices","getUserMedia","then","attachToVideo","catch","error","console","log","stream","srcObject","paused","ended","draw","requestAnimationFrame","drawImage","srcImage","dstImage","getImageData","putImageData","loadContentsOf","brightnessContrast","hueSaturation","vibrance","update","pixelUtils","target","style","display","Error","map","parseFloat","setTimeout","rgb","slice","hex","parseInt","values","checked"],"mappings":"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","file":"src.c0e9269c.js","sourceRoot":"..","sourcesContent":["/*\n * glfx.js\n * http://evanw.github.com/glfx.js/\n *\n * Copyright 2011 Evan Wallace\n * Released under the MIT license\n */\nvar fx=function(){function q(a,d,c){return Math.max(a,Math.min(d,c))}function w(b){return{_:b,loadContentsOf:function(b){a=this._.gl;this._.loadContentsOf(b)},destroy:function(){a=this._.gl;this._.destroy()}}}function A(a){return w(r.fromElement(a))}function B(b,d){var c=a.UNSIGNED_BYTE;if(a.getExtension(\"OES_texture_float\")&&a.getExtension(\"OES_texture_float_linear\")){var e=new r(100,100,a.RGBA,a.FLOAT);try{e.drawTo(function(){c=a.FLOAT})}catch(g){}e.destroy()}this._.texture&&this._.texture.destroy();\nthis._.spareTexture&&this._.spareTexture.destroy();this.width=b;this.height=d;this._.texture=new r(b,d,a.RGBA,c);this._.spareTexture=new r(b,d,a.RGBA,c);this._.extraTexture=this._.extraTexture||new r(0,0,a.RGBA,c);this._.flippedShader=this._.flippedShader||new h(null,\"uniform sampler2D texture;varying vec2 texCoord;void main(){gl_FragColor=texture2D(texture,vec2(texCoord.x,1.0-texCoord.y));}\");this._.isInitialized=!0}function C(a,d,c){if(!this._.isInitialized||\na._.width!=this.width||a._.height!=this.height)B.call(this,d?d:a._.width,c?c:a._.height);a._.use();this._.texture.drawTo(function(){h.getDefaultShader().drawRect()});return this}function D(){this._.texture.use();this._.flippedShader.drawRect();return this}function f(a,d,c,e){(c||this._.texture).use();this._.spareTexture.drawTo(function(){a.uniforms(d).drawRect()});this._.spareTexture.swapWith(e||this._.texture)}function E(a){a.parentNode.insertBefore(this,a);a.parentNode.removeChild(a);return this}\nfunction F(){var b=new r(this._.texture.width,this._.texture.height,a.RGBA,a.UNSIGNED_BYTE);this._.texture.use();b.drawTo(function(){h.getDefaultShader().drawRect()});return w(b)}function G(){var b=this._.texture.width,d=this._.texture.height,c=new Uint8Array(4*b*d);this._.texture.drawTo(function(){a.readPixels(0,0,b,d,a.RGBA,a.UNSIGNED_BYTE,c)});return c}function k(b){return function(){a=this._.gl;return b.apply(this,arguments)}}function x(a,d,c,e,g,n,l,p){var m=c-g,h=e-n,f=l-g,k=p-n;g=a-c+g-l;n=\nd-e+n-p;var q=m*k-f*h,f=(g*k-f*n)/q,m=(m*n-g*h)/q;return[c-a+f*c,e-d+f*e,f,l-a+m*l,p-d+m*p,m,a,d,1]}function y(a){var d=a[0],c=a[1],e=a[2],g=a[3],n=a[4],l=a[5],p=a[6],m=a[7];a=a[8];var f=d*n*a-d*l*m-c*g*a+c*l*p+e*g*m-e*n*p;return[(n*a-l*m)/f,(e*m-c*a)/f,(c*l-e*n)/f,(l*p-g*a)/f,(d*a-e*p)/f,(e*g-d*l)/f,(g*m-n*p)/f,(c*p-d*m)/f,(d*n-c*g)/f]}function z(a){var d=a.length;this.xa=[];this.ya=[];this.u=[];this.y2=[];a.sort(function(a,b){return a[0]-b[0]});for(var c=0;c<d;c++)this.xa.push(a[c][0]),this.ya.push(a[c][1]);\nthis.u[0]=0;this.y2[0]=0;for(c=1;c<d-1;++c){a=this.xa[c+1]-this.xa[c-1];var e=(this.xa[c]-this.xa[c-1])/a,g=e*this.y2[c-1]+2;this.y2[c]=(e-1)/g;this.u[c]=(6*((this.ya[c+1]-this.ya[c])/(this.xa[c+1]-this.xa[c])-(this.ya[c]-this.ya[c-1])/(this.xa[c]-this.xa[c-1]))/a-e*this.u[c-1])/g}this.y2[d-1]=0;for(c=d-2;0<=c;--c)this.y2[c]=this.y2[c]*this.y2[c+1]+this.u[c]}function u(a,d){return new h(null,a+\"uniform sampler2D texture;uniform vec2 texSize;varying vec2 texCoord;void main(){vec2 coord=texCoord*texSize;\"+\nd+\"gl_FragColor=texture2D(texture,coord/texSize);vec2 clampedCoord=clamp(coord,vec2(0.0),texSize);if(coord!=clampedCoord){gl_FragColor.a*=max(0.0,1.0-length(coord-clampedCoord));}}\")}function H(b){a.noise=a.noise||new h(null,\"uniform sampler2D texture;uniform float amount;varying vec2 texCoord;float rand(vec2 co){return fract(sin(dot(co.xy,vec2(12.9898,78.233)))*43758.5453);}void main(){vec4 color=texture2D(texture,texCoord);float diff=(rand(texCoord)-0.5)*amount;color.r+=diff;color.g+=diff;color.b+=diff;gl_FragColor=color;}\");\nf.call(this,a.noise,{amount:q(0,b,1)});return this}function I(b){a.vibrance=a.vibrance||new h(null,\"uniform sampler2D texture;uniform float amount;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);float average=(color.r+color.g+color.b)/3.0;float mx=max(color.r,max(color.g,color.b));float amt=(mx-average)*(-amount*3.0);color.rgb=mix(color.rgb,vec3(mx),amt);gl_FragColor=color;}\");\nf.call(this,a.vibrance,{amount:q(-1,b,1)});return this}function J(b,d){a.vignette=a.vignette||new h(null,\"uniform sampler2D texture;uniform float size;uniform float amount;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);float dist=distance(texCoord,vec2(0.5,0.5));color.rgb*=smoothstep(0.8,size*0.799,dist*(amount+size));gl_FragColor=color;}\");\nf.call(this,a.vignette,{size:q(0,b,1),amount:q(0,d,1)});return this}function K(b){a.denoise=a.denoise||new h(null,\"uniform sampler2D texture;uniform float exponent;uniform float strength;uniform vec2 texSize;varying vec2 texCoord;void main(){vec4 center=texture2D(texture,texCoord);vec4 color=vec4(0.0);float total=0.0;for(float x=-4.0;x<=4.0;x+=1.0){for(float y=-4.0;y<=4.0;y+=1.0){vec4 sample=texture2D(texture,texCoord+vec2(x,y)/texSize);float weight=1.0-abs(dot(sample.rgb-center.rgb,vec3(0.25)));weight=pow(weight,exponent);color+=sample*weight;total+=weight;}}gl_FragColor=color/total;}\");\nfor(var d=0;2>d;d++)f.call(this,a.denoise,{exponent:Math.max(0,b),texSize:[this.width,this.height]});return this}function L(b,d){a.brightnessContrast=a.brightnessContrast||new h(null,\"uniform sampler2D texture;uniform float brightness;uniform float contrast;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);color.rgb+=brightness;if(contrast>0.0){color.rgb=(color.rgb-0.5)/(1.0-contrast)+0.5;}else{color.rgb=(color.rgb-0.5)*(1.0+contrast)+0.5;}gl_FragColor=color;}\");\nf.call(this,a.brightnessContrast,{brightness:q(-1,b,1),contrast:q(-1,d,1)});return this}function t(a){a=new z(a);for(var d=[],c=0;256>c;c++)d.push(q(0,Math.floor(256*a.interpolate(c/255)),255));return d}function M(b,d,c){b=t(b);1==arguments.length?d=c=b:(d=t(d),c=t(c));for(var e=[],g=0;256>g;g++)e.splice(e.length,0,b[g],d[g],c[g],255);this._.extraTexture.initFromBytes(256,1,e);this._.extraTexture.use(1);a.curves=a.curves||new h(null,\"uniform sampler2D texture;uniform sampler2D map;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);color.r=texture2D(map,vec2(color.r)).r;color.g=texture2D(map,vec2(color.g)).g;color.b=texture2D(map,vec2(color.b)).b;gl_FragColor=color;}\");\na.curves.textures({map:1});f.call(this,a.curves,{});return this}function N(b,d){a.unsharpMask=a.unsharpMask||new h(null,\"uniform sampler2D blurredTexture;uniform sampler2D originalTexture;uniform float strength;uniform float threshold;varying vec2 texCoord;void main(){vec4 blurred=texture2D(blurredTexture,texCoord);vec4 original=texture2D(originalTexture,texCoord);gl_FragColor=mix(blurred,original,1.0+strength);}\");\nthis._.extraTexture.ensureFormat(this._.texture);this._.texture.use();this._.extraTexture.drawTo(function(){h.getDefaultShader().drawRect()});this._.extraTexture.use(1);this.triangleBlur(b);a.unsharpMask.textures({originalTexture:1});f.call(this,a.unsharpMask,{strength:d});this._.extraTexture.unuse(1);return this}function O(b){a.sepia=a.sepia||new h(null,\"uniform sampler2D texture;uniform float amount;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);float r=color.r;float g=color.g;float b=color.b;color.r=min(1.0,(r*(1.0-(0.607*amount)))+(g*(0.769*amount))+(b*(0.189*amount)));color.g=min(1.0,(r*0.349*amount)+(g*(1.0-(0.314*amount)))+(b*0.168*amount));color.b=min(1.0,(r*0.272*amount)+(g*0.534*amount)+(b*(1.0-(0.869*amount))));gl_FragColor=color;}\");\nf.call(this,a.sepia,{amount:q(0,b,1)});return this}function P(b,d){a.hueSaturation=a.hueSaturation||new h(null,\"uniform sampler2D texture;uniform float hue;uniform float saturation;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);float angle=hue*3.14159265;float s=sin(angle),c=cos(angle);vec3 weights=(vec3(2.0*c,-sqrt(3.0)*s-c,sqrt(3.0)*s-c)+1.0)/3.0;float len=length(color.rgb);color.rgb=vec3(dot(color.rgb,weights.xyz),dot(color.rgb,weights.zxy),dot(color.rgb,weights.yzx));float average=(color.r+color.g+color.b)/3.0;if(saturation>0.0){color.rgb+=(average-color.rgb)*(1.0-1.0/(1.001-saturation));}else{color.rgb+=(average-color.rgb)*(-saturation);}gl_FragColor=color;}\");\nf.call(this,a.hueSaturation,{hue:q(-1,b,1),saturation:q(-1,d,1)});return this}function Q(b,d,c){a.zoomBlur=a.zoomBlur||new h(null,\"uniform sampler2D texture;uniform vec2 center;uniform float strength;uniform vec2 texSize;varying vec2 texCoord;\"+s+\"void main(){vec4 color=vec4(0.0);float total=0.0;vec2 toCenter=center-texCoord*texSize;float offset=random(vec3(12.9898,78.233,151.7182),0.0);for(float t=0.0;t<=40.0;t++){float percent=(t+offset)/40.0;float weight=4.0*(percent-percent*percent);vec4 sample=texture2D(texture,texCoord+toCenter*percent*strength/texSize);sample.rgb*=sample.a;color+=sample*weight;total+=weight;}gl_FragColor=color/total;gl_FragColor.rgb/=gl_FragColor.a+0.00001;}\");\nf.call(this,a.zoomBlur,{center:[b,d],strength:c,texSize:[this.width,this.height]});return this}function R(b,d,c,e,g,n){a.tiltShift=a.tiltShift||new h(null,\"uniform sampler2D texture;uniform float blurRadius;uniform float gradientRadius;uniform vec2 start;uniform vec2 end;uniform vec2 delta;uniform vec2 texSize;varying vec2 texCoord;\"+s+\"void main(){vec4 color=vec4(0.0);float total=0.0;float offset=random(vec3(12.9898,78.233,151.7182),0.0);vec2 normal=normalize(vec2(start.y-end.y,end.x-start.x));float radius=smoothstep(0.0,1.0,abs(dot(texCoord*texSize-start,normal))/gradientRadius)*blurRadius;for(float t=-30.0;t<=30.0;t++){float percent=(t+offset-0.5)/30.0;float weight=1.0-abs(percent);vec4 sample=texture2D(texture,texCoord+delta/texSize*percent*radius);sample.rgb*=sample.a;color+=sample*weight;total+=weight;}gl_FragColor=color/total;gl_FragColor.rgb/=gl_FragColor.a+0.00001;}\");\nvar l=c-b,p=e-d,m=Math.sqrt(l*l+p*p);f.call(this,a.tiltShift,{blurRadius:g,gradientRadius:n,start:[b,d],end:[c,e],delta:[l/m,p/m],texSize:[this.width,this.height]});f.call(this,a.tiltShift,{blurRadius:g,gradientRadius:n,start:[b,d],end:[c,e],delta:[-p/m,l/m],texSize:[this.width,this.height]});return this}function S(b,d,c){a.lensBlurPrePass=a.lensBlurPrePass||new h(null,\"uniform sampler2D texture;uniform float power;varying vec2 texCoord;void main(){vec4 color=texture2D(texture,texCoord);color=pow(color,vec4(power));gl_FragColor=vec4(color);}\");\nvar e=\"uniform sampler2D texture0;uniform sampler2D texture1;uniform vec2 delta0;uniform vec2 delta1;uniform float power;varying vec2 texCoord;\"+s+\"vec4 sample(vec2 delta){float offset=random(vec3(delta,151.7182),0.0);vec4 color=vec4(0.0);float total=0.0;for(float t=0.0;t<=30.0;t++){float percent=(t+offset)/30.0;color+=texture2D(texture0,texCoord+delta*percent);total+=1.0;}return color/total;}\";\na.lensBlur0=a.lensBlur0||new h(null,e+\"void main(){gl_FragColor=sample(delta0);}\");a.lensBlur1=a.lensBlur1||new h(null,e+\"void main(){gl_FragColor=(sample(delta0)+sample(delta1))*0.5;}\");a.lensBlur2=a.lensBlur2||(new h(null,e+\"void main(){vec4 color=(sample(delta0)+2.0*texture2D(texture1,texCoord))/3.0;gl_FragColor=pow(color,vec4(power));}\")).textures({texture1:1});for(var e=\n[],g=0;3>g;g++){var n=c+2*g*Math.PI/3;e.push([b*Math.sin(n)/this.width,b*Math.cos(n)/this.height])}b=Math.pow(10,q(-1,d,1));f.call(this,a.lensBlurPrePass,{power:b});this._.extraTexture.ensureFormat(this._.texture);f.call(this,a.lensBlur0,{delta0:e[0]},this._.texture,this._.extraTexture);f.call(this,a.lensBlur1,{delta0:e[1],delta1:e[2]},this._.extraTexture,this._.extraTexture);f.call(this,a.lensBlur0,{delta0:e[1]});this._.extraTexture.use(1);f.call(this,a.lensBlur2,{power:1/b,delta0:e[2]});return this}\nfunction T(b){a.triangleBlur=a.triangleBlur||new h(null,\"uniform sampler2D texture;uniform vec2 delta;varying vec2 texCoord;\"+s+\"void main(){vec4 color=vec4(0.0);float total=0.0;float offset=random(vec3(12.9898,78.233,151.7182),0.0);for(float t=-30.0;t<=30.0;t++){float percent=(t+offset-0.5)/30.0;float weight=1.0-abs(percent);vec4 sample=texture2D(texture,texCoord+delta*percent);sample.rgb*=sample.a;color+=sample*weight;total+=weight;}gl_FragColor=color/total;gl_FragColor.rgb/=gl_FragColor.a+0.00001;}\");\nf.call(this,a.triangleBlur,{delta:[b/this.width,0]});f.call(this,a.triangleBlur,{delta:[0,b/this.height]});return this}function U(b){a.edgeWork1=a.edgeWork1||new h(null,\"uniform sampler2D texture;uniform vec2 delta;varying vec2 texCoord;\"+s+\"void main(){vec2 color=vec2(0.0);vec2 total=vec2(0.0);float offset=random(vec3(12.9898,78.233,151.7182),0.0);for(float t=-30.0;t<=30.0;t++){float percent=(t+offset-0.5)/30.0;float weight=1.0-abs(percent);vec3 sample=texture2D(texture,texCoord+delta*percent).rgb;float average=(sample.r+sample.g+sample.b)/3.0;color.x+=average*weight;total.x+=weight;if(abs(t)<15.0){weight=weight*2.0-1.0;color.y+=average*weight;total.y+=weight;}}gl_FragColor=vec4(color/total,0.0,1.0);}\");\na.edgeWork2=a.edgeWork2||new h(null,\"uniform sampler2D texture;uniform vec2 delta;varying vec2 texCoord;\"+s+\"void main(){vec2 color=vec2(0.0);vec2 total=vec2(0.0);float offset=random(vec3(12.9898,78.233,151.7182),0.0);for(float t=-30.0;t<=30.0;t++){float percent=(t+offset-0.5)/30.0;float weight=1.0-abs(percent);vec2 sample=texture2D(texture,texCoord+delta*percent).xy;color.x+=sample.x*weight;total.x+=weight;if(abs(t)<15.0){weight=weight*2.0-1.0;color.y+=sample.y*weight;total.y+=weight;}}float c=clamp(10000.0*(color.y/total.y-color.x/total.x)+0.5,0.0,1.0);gl_FragColor=vec4(c,c,c,1.0);}\");\nf.call(this,a.edgeWork1,{delta:[b/this.width,0]});f.call(this,a.edgeWork2,{delta:[0,b/this.height]});return this}function V(b,d,c){a.hexagonalPixelate=a.hexagonalPixelate||new h(null,\"uniform sampler2D texture;uniform vec2 center;uniform float scale;uniform vec2 texSize;varying vec2 texCoord;void main(){vec2 tex=(texCoord*texSize-center)/scale;tex.y/=0.866025404;tex.x-=tex.y*0.5;vec2 a;if(tex.x+tex.y-floor(tex.x)-floor(tex.y)<1.0)a=vec2(floor(tex.x),floor(tex.y));else a=vec2(ceil(tex.x),ceil(tex.y));vec2 b=vec2(ceil(tex.x),floor(tex.y));vec2 c=vec2(floor(tex.x),ceil(tex.y));vec3 TEX=vec3(tex.x,tex.y,1.0-tex.x-tex.y);vec3 A=vec3(a.x,a.y,1.0-a.x-a.y);vec3 B=vec3(b.x,b.y,1.0-b.x-b.y);vec3 C=vec3(c.x,c.y,1.0-c.x-c.y);float alen=length(TEX-A);float blen=length(TEX-B);float clen=length(TEX-C);vec2 choice;if(alen<blen){if(alen<clen)choice=a;else choice=c;}else{if(blen<clen)choice=b;else choice=c;}choice.x+=choice.y*0.5;choice.y*=0.866025404;choice*=scale/texSize;gl_FragColor=texture2D(texture,choice+center/texSize);}\");\nf.call(this,a.hexagonalPixelate,{center:[b,d],scale:c,texSize:[this.width,this.height]});return this}function W(b,d,c,e){a.colorHalftone=a.colorHalftone||new h(null,\"uniform sampler2D texture;uniform vec2 center;uniform float angle;uniform float scale;uniform vec2 texSize;varying vec2 texCoord;float pattern(float angle){float s=sin(angle),c=cos(angle);vec2 tex=texCoord*texSize-center;vec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;return(sin(point.x)*sin(point.y))*4.0;}void main(){vec4 color=texture2D(texture,texCoord);vec3 cmy=1.0-color.rgb;float k=min(cmy.x,min(cmy.y,cmy.z));cmy=(cmy-k)/(1.0-k);cmy=clamp(cmy*10.0-3.0+vec3(pattern(angle+0.26179),pattern(angle+1.30899),pattern(angle)),0.0,1.0);k=clamp(k*10.0-5.0+pattern(angle+0.78539),0.0,1.0);gl_FragColor=vec4(1.0-cmy-k,color.a);}\");\nf.call(this,a.colorHalftone,{center:[b,d],angle:c,scale:Math.PI/e,texSize:[this.width,this.height]});return this}function X(b){a.ink=a.ink||new h(null,\"uniform sampler2D texture;uniform float strength;uniform vec2 texSize;varying vec2 texCoord;void main(){vec2 dx=vec2(1.0/texSize.x,0.0);vec2 dy=vec2(0.0,1.0/texSize.y);vec4 color=texture2D(texture,texCoord);float bigTotal=0.0;float smallTotal=0.0;vec3 bigAverage=vec3(0.0);vec3 smallAverage=vec3(0.0);for(float x=-2.0;x<=2.0;x+=1.0){for(float y=-2.0;y<=2.0;y+=1.0){vec3 sample=texture2D(texture,texCoord+dx*x+dy*y).rgb;bigAverage+=sample;bigTotal+=1.0;if(abs(x)+abs(y)<2.0){smallAverage+=sample;smallTotal+=1.0;}}}vec3 edge=max(vec3(0.0),bigAverage/bigTotal-smallAverage/smallTotal);gl_FragColor=vec4(color.rgb-dot(edge,edge)*strength*100000.0,color.a);}\");\nf.call(this,a.ink,{strength:b*b*b*b*b,texSize:[this.width,this.height]});return this}function Y(b,d,c,e){a.dotScreen=a.dotScreen||new h(null,\"uniform sampler2D texture;uniform vec2 center;uniform float angle;uniform float scale;uniform vec2 texSize;varying vec2 texCoord;float pattern(){float s=sin(angle),c=cos(angle);vec2 tex=texCoord*texSize-center;vec2 point=vec2(c*tex.x-s*tex.y,s*tex.x+c*tex.y)*scale;return(sin(point.x)*sin(point.y))*4.0;}void main(){vec4 color=texture2D(texture,texCoord);float average=(color.r+color.g+color.b)/3.0;gl_FragColor=vec4(vec3(average*10.0-5.0+pattern()),color.a);}\");\nf.call(this,a.dotScreen,{center:[b,d],angle:c,scale:Math.PI/e,texSize:[this.width,this.height]});return this}function Z(b,d,c){a.matrixWarp=a.matrixWarp||u(\"uniform mat3 matrix;uniform bool useTextureSpace;\",\"if(useTextureSpace)coord=coord/texSize*2.0-1.0;vec3 warp=matrix*vec3(coord,1.0);coord=warp.xy/warp.z;if(useTextureSpace)coord=(coord*0.5+0.5)*texSize;\");b=Array.prototype.concat.apply([],b);if(4==b.length)b=\n[b[0],b[1],0,b[2],b[3],0,0,0,1];else if(9!=b.length)throw\"can only warp with 2x2 or 3x3 matrix\";f.call(this,a.matrixWarp,{matrix:d?y(b):b,texSize:[this.width,this.height],useTextureSpace:c|0});return this}function $(b,d,c,e){a.swirl=a.swirl||u(\"uniform float radius;uniform float angle;uniform vec2 center;\",\"coord-=center;float distance=length(coord);if(distance<radius){float percent=(radius-distance)/radius;float theta=percent*percent*angle;float s=sin(theta);float c=cos(theta);coord=vec2(coord.x*c-coord.y*s,coord.x*s+coord.y*c);}coord+=center;\");\nf.call(this,a.swirl,{radius:c,center:[b,d],angle:e,texSize:[this.width,this.height]});return this}function aa(b,d,c,e){a.bulgePinch=a.bulgePinch||u(\"uniform float radius;uniform float strength;uniform vec2 center;\",\"coord-=center;float distance=length(coord);if(distance<radius){float percent=distance/radius;if(strength>0.0){coord*=mix(1.0,smoothstep(0.0,radius/distance,percent),strength*0.75);}else{coord*=mix(1.0,pow(percent,1.0+strength*0.75)*radius/distance,1.0-percent);}}coord+=center;\");\nf.call(this,a.bulgePinch,{radius:c,strength:q(-1,e,1),center:[b,d],texSize:[this.width,this.height]});return this}function ba(a,d){var c=x.apply(null,d),e=x.apply(null,a),c=y(c);return this.matrixWarp([c[0]*e[0]+c[1]*e[3]+c[2]*e[6],c[0]*e[1]+c[1]*e[4]+c[2]*e[7],c[0]*e[2]+c[1]*e[5]+c[2]*e[8],c[3]*e[0]+c[4]*e[3]+c[5]*e[6],c[3]*e[1]+c[4]*e[4]+c[5]*e[7],c[3]*e[2]+c[4]*e[5]+c[5]*e[8],c[6]*e[0]+c[7]*e[3]+c[8]*e[6],c[6]*e[1]+c[7]*e[4]+c[8]*e[7],c[6]*e[2]+c[7]*e[5]+c[8]*e[8]])}var v={};(function(){function a(b){if(!b.getExtension(\"OES_texture_float\"))return!1;\nvar c=b.createFramebuffer(),e=b.createTexture();b.bindTexture(b.TEXTURE_2D,e);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texImage2D(b.TEXTURE_2D,0,b.RGBA,1,1,0,b.RGBA,b.UNSIGNED_BYTE,null);b.bindFramebuffer(b.FRAMEBUFFER,c);b.framebufferTexture2D(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0,b.TEXTURE_2D,\ne,0);c=b.createTexture();b.bindTexture(b.TEXTURE_2D,c);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.LINEAR);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.LINEAR);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texImage2D(b.TEXTURE_2D,0,b.RGBA,2,2,0,b.RGBA,b.FLOAT,new Float32Array([2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]));var e=b.createProgram(),d=b.createShader(b.VERTEX_SHADER),g=b.createShader(b.FRAGMENT_SHADER);\nb.shaderSource(d,\"attribute vec2 vertex;void main(){gl_Position=vec4(vertex,0.0,1.0);}\");b.shaderSource(g,\"uniform sampler2D texture;void main(){gl_FragColor=texture2D(texture,vec2(0.5));}\");b.compileShader(d);b.compileShader(g);b.attachShader(e,d);b.attachShader(e,g);b.linkProgram(e);d=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,d);b.bufferData(b.ARRAY_BUFFER,new Float32Array([0,0]),b.STREAM_DRAW);b.enableVertexAttribArray(0);\nb.vertexAttribPointer(0,2,b.FLOAT,!1,0,0);d=new Uint8Array(4);b.useProgram(e);b.viewport(0,0,1,1);b.bindTexture(b.TEXTURE_2D,c);b.drawArrays(b.POINTS,0,1);b.readPixels(0,0,1,1,b.RGBA,b.UNSIGNED_BYTE,d);return 127===d[0]||128===d[0]}function d(){}function c(a){\"OES_texture_float_linear\"===a?(void 0===this.$OES_texture_float_linear$&&Object.defineProperty(this,\"$OES_texture_float_linear$\",{enumerable:!1,configurable:!1,writable:!1,value:new d}),a=this.$OES_texture_float_linear$):a=l.call(this,a);return a}\nfunction e(){var a=f.call(this);-1===a.indexOf(\"OES_texture_float_linear\")&&a.push(\"OES_texture_float_linear\");return a}try{var g=document.createElement(\"canvas\").getContext(\"experimental-webgl\")}catch(n){}if(g&&-1===g.getSupportedExtensions().indexOf(\"OES_texture_float_linear\")&&a(g)){var l=WebGLRenderingContext.prototype.getExtension,f=WebGLRenderingContext.prototype.getSupportedExtensions;WebGLRenderingContext.prototype.getExtension=c;WebGLRenderingContext.prototype.getSupportedExtensions=e}})();\nvar a;v.canvas=function(){var b=document.createElement(\"canvas\");try{a=b.getContext(\"experimental-webgl\",{premultipliedAlpha:!1})}catch(d){a=null}if(!a)throw\"This browser does not support WebGL\";b._={gl:a,isInitialized:!1,texture:null,spareTexture:null,flippedShader:null};b.texture=k(A);b.draw=k(C);b.update=k(D);b.replace=k(E);b.contents=k(F);b.getPixelArray=k(G);b.brightnessContrast=k(L);b.hexagonalPixelate=k(V);b.hueSaturation=k(P);b.colorHalftone=k(W);b.triangleBlur=k(T);b.unsharpMask=k(N);b.perspective=\nk(ba);b.matrixWarp=k(Z);b.bulgePinch=k(aa);b.tiltShift=k(R);b.dotScreen=k(Y);b.edgeWork=k(U);b.lensBlur=k(S);b.zoomBlur=k(Q);b.noise=k(H);b.denoise=k(K);b.curves=k(M);b.swirl=k($);b.ink=k(X);b.vignette=k(J);b.vibrance=k(I);b.sepia=k(O);return b};v.splineInterpolate=t;var r=function(){function b(b,c,d,l){this.gl=a;this.id=a.createTexture();this.width=b;this.height=c;this.format=d;this.type=l;a.bindTexture(a.TEXTURE_2D,this.id);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,\na.TEXTURE_MIN_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE);b&&c&&a.texImage2D(a.TEXTURE_2D,0,this.format,b,c,0,this.format,this.type,null)}function d(a){null==c&&(c=document.createElement(\"canvas\"));c.width=a.width;c.height=a.height;a=c.getContext(\"2d\");a.clearRect(0,0,c.width,c.height);return a}b.fromElement=function(c){var d=new b(0,0,a.RGBA,a.UNSIGNED_BYTE);d.loadContentsOf(c);return d};b.prototype.loadContentsOf=\nfunction(b){this.width=b.width||b.videoWidth;this.height=b.height||b.videoHeight;a.bindTexture(a.TEXTURE_2D,this.id);a.texImage2D(a.TEXTURE_2D,0,this.format,this.format,this.type,b)};b.prototype.initFromBytes=function(b,c,d){this.width=b;this.height=c;this.format=a.RGBA;this.type=a.UNSIGNED_BYTE;a.bindTexture(a.TEXTURE_2D,this.id);a.texImage2D(a.TEXTURE_2D,0,a.RGBA,b,c,0,a.RGBA,this.type,new Uint8Array(d))};b.prototype.destroy=function(){a.deleteTexture(this.id);this.id=null};b.prototype.use=function(b){a.activeTexture(a.TEXTURE0+\n(b||0));a.bindTexture(a.TEXTURE_2D,this.id)};b.prototype.unuse=function(b){a.activeTexture(a.TEXTURE0+(b||0));a.bindTexture(a.TEXTURE_2D,null)};b.prototype.ensureFormat=function(b,c,d,l){if(1==arguments.length){var f=arguments[0];b=f.width;c=f.height;d=f.format;l=f.type}if(b!=this.width||c!=this.height||d!=this.format||l!=this.type)this.width=b,this.height=c,this.format=d,this.type=l,a.bindTexture(a.TEXTURE_2D,this.id),a.texImage2D(a.TEXTURE_2D,0,this.format,b,c,0,this.format,this.type,null)};b.prototype.drawTo=\nfunction(b){a.framebuffer=a.framebuffer||a.createFramebuffer();a.bindFramebuffer(a.FRAMEBUFFER,a.framebuffer);a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,this.id,0);if(a.checkFramebufferStatus(a.FRAMEBUFFER)!==a.FRAMEBUFFER_COMPLETE)throw Error(\"incomplete framebuffer\");a.viewport(0,0,this.width,this.height);b();a.bindFramebuffer(a.FRAMEBUFFER,null)};var c=null;b.prototype.fillUsingCanvas=function(b){b(d(this));this.format=a.RGBA;this.type=a.UNSIGNED_BYTE;a.bindTexture(a.TEXTURE_2D,\nthis.id);a.texImage2D(a.TEXTURE_2D,0,a.RGBA,a.RGBA,a.UNSIGNED_BYTE,c);return this};b.prototype.toImage=function(b){this.use();h.getDefaultShader().drawRect();var g=4*this.width*this.height,f=new Uint8Array(g),l=d(this),p=l.createImageData(this.width,this.height);a.readPixels(0,0,this.width,this.height,a.RGBA,a.UNSIGNED_BYTE,f);for(var m=0;m<g;m++)p.data[m]=f[m];l.putImageData(p,0,0);b.src=c.toDataURL()};b.prototype.swapWith=function(a){var b;b=a.id;a.id=this.id;this.id=b;b=a.width;a.width=this.width;\nthis.width=b;b=a.height;a.height=this.height;this.height=b;b=a.format;a.format=this.format;this.format=b};return b}();z.prototype.interpolate=function(a){for(var d=0,c=this.ya.length-1;1<c-d;){var e=c+d>>1;this.xa[e]>a?c=e:d=e}var e=this.xa[c]-this.xa[d],g=(this.xa[c]-a)/e;a=(a-this.xa[d])/e;return g*this.ya[d]+a*this.ya[c]+((g*g*g-g)*this.y2[d]+(a*a*a-a)*this.y2[c])*e*e/6};var h=function(){function b(b,c){var d=a.createShader(b);a.shaderSource(d,c);a.compileShader(d);if(!a.getShaderParameter(d,a.COMPILE_STATUS))throw\"compile error: \"+\na.getShaderInfoLog(d);return d}function d(d,f){this.texCoordAttribute=this.vertexAttribute=null;this.program=a.createProgram();d=d||c;f=f||e;f=\"precision highp float;\"+f;a.attachShader(this.program,b(a.VERTEX_SHADER,d));a.attachShader(this.program,b(a.FRAGMENT_SHADER,f));a.linkProgram(this.program);if(!a.getProgramParameter(this.program,a.LINK_STATUS))throw\"link error: \"+a.getProgramInfoLog(this.program);}var c=\"attribute vec2 vertex;attribute vec2 _texCoord;varying vec2 texCoord;void main(){texCoord=_texCoord;gl_Position=vec4(vertex*2.0-1.0,0.0,1.0);}\",\ne=\"uniform sampler2D texture;varying vec2 texCoord;void main(){gl_FragColor=texture2D(texture,texCoord);}\";d.prototype.destroy=function(){a.deleteProgram(this.program);this.program=null};d.prototype.uniforms=function(b){a.useProgram(this.program);for(var c in b)if(b.hasOwnProperty(c)){var d=a.getUniformLocation(this.program,c);if(null!==d){var e=b[c];if(\"[object Array]\"==Object.prototype.toString.call(e))switch(e.length){case 1:a.uniform1fv(d,new Float32Array(e));break;\ncase 2:a.uniform2fv(d,new Float32Array(e));break;case 3:a.uniform3fv(d,new Float32Array(e));break;case 4:a.uniform4fv(d,new Float32Array(e));break;case 9:a.uniformMatrix3fv(d,!1,new Float32Array(e));break;case 16:a.uniformMatrix4fv(d,!1,new Float32Array(e));break;default:throw\"dont't know how to load uniform \\\"\"+c+'\" of length '+e.length;}else if(\"[object Number]\"==Object.prototype.toString.call(e))a.uniform1f(d,e);else throw'attempted to set uniform \"'+c+'\" to invalid value '+(e||\"undefined\").toString();\n}}return this};d.prototype.textures=function(b){a.useProgram(this.program);for(var c in b)b.hasOwnProperty(c)&&a.uniform1i(a.getUniformLocation(this.program,c),b[c]);return this};d.prototype.drawRect=function(b,c,d,e){var f=a.getParameter(a.VIEWPORT);c=void 0!==c?(c-f[1])/f[3]:0;b=void 0!==b?(b-f[0])/f[2]:0;d=void 0!==d?(d-f[0])/f[2]:1;e=void 0!==e?(e-f[1])/f[3]:1;null==a.vertexBuffer&&(a.vertexBuffer=a.createBuffer());a.bindBuffer(a.ARRAY_BUFFER,a.vertexBuffer);a.bufferData(a.ARRAY_BUFFER,new Float32Array([b,\nc,b,e,d,c,d,e]),a.STATIC_DRAW);null==a.texCoordBuffer&&(a.texCoordBuffer=a.createBuffer(),a.bindBuffer(a.ARRAY_BUFFER,a.texCoordBuffer),a.bufferData(a.ARRAY_BUFFER,new Float32Array([0,0,0,1,1,0,1,1]),a.STATIC_DRAW));null==this.vertexAttribute&&(this.vertexAttribute=a.getAttribLocation(this.program,\"vertex\"),a.enableVertexAttribArray(this.vertexAttribute));null==this.texCoordAttribute&&(this.texCoordAttribute=a.getAttribLocation(this.program,\"_texCoord\"),a.enableVertexAttribArray(this.texCoordAttribute));\na.useProgram(this.program);a.bindBuffer(a.ARRAY_BUFFER,a.vertexBuffer);a.vertexAttribPointer(this.vertexAttribute,2,a.FLOAT,!1,0,0);a.bindBuffer(a.ARRAY_BUFFER,a.texCoordBuffer);a.vertexAttribPointer(this.texCoordAttribute,2,a.FLOAT,!1,0,0);a.drawArrays(a.TRIANGLE_STRIP,0,4)};d.getDefaultShader=function(){a.defaultShader=a.defaultShader||new d;return a.defaultShader};return d}(),s=\"float random(vec3 scale,float seed){return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453+seed);}\";\nreturn v}();\"object\"===typeof module?module.exports=fx:window.fx=fx;\n","/**\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and l in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSL representation\n */\nexport function rgbToHsl(r, g, b) {\n  (r /= 255), (g /= 255), (b /= 255);\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h,\n    s,\n    l = (max + min) / 2;\n\n  if (max == min) {\n    h = s = 0; // achromatic\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [h, s, l];\n}\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  l       The lightness\n * @return  Array           The RGB representation\n */\nexport function hslToRgb(h, s, l) {\n  var r, g, b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [r * 255, g * 255, b * 255];\n}\n","import * as colorUtils from './color';\n\nlet brightness;\nlet contrast;\nlet saturation;\nlet intercept;\n\nexport function setBrightnessAndContrast([b, c, sat]) {\n  brightness = b;\n  saturation = sat / 100 + 1;\n  contrast = c / 100 + 1;\n  intercept = 128 * (1 - contrast);\n}\n\nexport function red(r) {\n  return r;\n}\n\nexport function green(r, g) {\n  return g;\n}\n\nexport function blue(r, g, b) {\n  return b;\n}\n\nexport function mix(r, g, b, sliders) {\n  return (r * sliders[0] + g * sliders[1] + b * sliders[2]) / 3;\n}\n\nfunction brightnessAndContrast(value) {\n  return (value + brightness) * contrast + intercept;\n}\n\nfunction saturate(r, g, b) {\n  const [h, s, l] = colorUtils.rgbToHsl(r, g, b);\n  return colorUtils.hslToRgb(h, s * saturation, l);\n}\n\nconst strategies = { mix, red, green, blue };\n\nexport function grayScale(frame, strategy, sliders) {\n  const imgData = frame.data;\n  const allData = imgData.length;\n  const alpha = sliders[3] * 255;\n  let output;\n\n  for (let i = 0; i < allData; i += 4) {\n    output = strategies[strategy](\n      brightnessAndContrast(imgData[i]),\n      brightnessAndContrast(imgData[i + 1]),\n      brightnessAndContrast(imgData[i + 2]),\n      sliders\n    );\n\n    imgData[i] = output;\n    imgData[i + 1] = output;\n    imgData[i + 2] = output;\n    imgData[i + 3] = alpha;\n  }\n\n  return frame;\n}\n\nexport function mixColors(frame, sliders) {\n  const imgData = frame.data;\n  const allData = imgData.length;\n  const alpha = sliders[3] * 255;\n\n  if (saturation === 1) {\n    for (let i = 0; i < allData; i += 4) {\n      imgData[i] = brightnessAndContrast(imgData[i]) * sliders[0];\n      imgData[i + 1] = brightnessAndContrast(imgData[i + 1]) * sliders[1];\n      imgData[i + 2] = brightnessAndContrast(imgData[i + 2]) * sliders[2];\n      imgData[i + 3] = alpha;\n    }\n  } else {\n    for (let i = 0; i < allData; i += 4) {\n      const [r, g, b] = saturate(\n        brightnessAndContrast(imgData[i]) * sliders[0],\n        brightnessAndContrast(imgData[i + 1]) * sliders[1],\n        brightnessAndContrast(imgData[i + 2]) * sliders[2]\n      );\n      imgData[i] = r;\n      imgData[i + 1] = g;\n      imgData[i + 2] = b;\n      imgData[i + 3] = alpha;\n    }\n  }\n\n  return frame;\n}\n\nconst similar = 1 / 6;\nexport function chromaColors(frame, chromaKeyHSL, HSLThreshold) {\n  const imgData = frame.data;\n  const allData = imgData.length;\n  const [hKey, sKey, lKey] = chromaKeyHSL;\n  const [hThresh, sThresh, lThresh] = HSLThreshold;\n\n  for (let i = 0; i < allData; i += 4) {\n    const r = brightnessAndContrast(imgData[i]);\n    const g = brightnessAndContrast(imgData[i + 1]);\n    const b = brightnessAndContrast(imgData[i + 2]);\n    const hsl = colorUtils.rgbToHsl(r, g, b);\n    const hDiff = Math.abs(hsl[0] - hKey);\n    const sDiff = Math.abs(hsl[1] - sKey);\n    const lDiff = Math.abs(hsl[2] - lKey);\n\n    imgData[i] = r;\n    imgData[i + 1] = g;\n    imgData[i + 2] = b;\n\n    if (hDiff < hThresh && sDiff < sThresh && lDiff < lThresh) {\n      imgData[i + 3] = (hDiff / similar) * 255;\n    }\n  }\n\n  return frame;\n}\n","import * as glfx from 'glfx';\nimport * as pixelUtils from './utils/pixel';\nimport * as colorUtils from './utils/color';\n\nlet glfxCanvas;\nlet glfxTexture;\nlet video;\nlet context;\nlet offScreenContext;\nlet width;\nlet height;\nlet colorMixerSliderElements;\nlet chromaKeySliderElements;\nlet adjustElements;\nlet form;\nlet colorInput;\nlet adjustValues = [];\nlet chromaColor = colorUtils.rgbToHsl(0, 255, 0);\nlet colorMixerValues;\nlet chromaKeyThreshold;\nlet colorMode = 'color';\nlet grayScaleStrategy = 'mix';\nlet effectsEnabled = false;\n\nconst aspectRatio = 1280 / 720;\n\nwindow.addEventListener('DOMContentLoaded', init, false);\n\nfunction init() {\n  width = window.innerWidth;\n  height = window.innerWidth / aspectRatio;\n\n  colorMixerSliderElements = [\n    ...document.querySelectorAll('[name=color-channels] input[type=range]')\n  ];\n  chromaKeySliderElements = [...document.querySelectorAll('[name=chroma-key] input[type=range]')];\n  adjustElements = [...document.querySelectorAll('[name=adjust] input[type=range]')];\n  form = document.getElementById('form');\n  colorInput = document.querySelector('input[type=color]');\n  video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  context = canvas.getContext('2d');\n  const offscreenCanvas = new OffscreenCanvas(width, height);\n  offScreenContext = offscreenCanvas.getContext('2d');\n  // mirror canvas\n  offScreenContext.translate(width, 0);\n  offScreenContext.scale(-1, 1);\n\n  // glfx\n  glfxCanvas = glfx.canvas();\n  glfxTexture = glfxCanvas.texture(video);\n  document.querySelector('.canvas-wrapper').insertAdjacentElement('afterend', glfxCanvas);\n\n  document.getElementById('on-off').addEventListener('change', toggleEffects, false);\n  form.addEventListener('reset', onReset, false);\n  colorInput.addEventListener('change', updateChromaColor, false);\n  form['color'].addEventListener('change', updateColorMode, false);\n  form['grayscale'].addEventListener('change', updateGrayScaleStrategy, false);\n  form['color-channels'].addEventListener('input', updateColorMixerValues, false);\n  form['chroma-key'].addEventListener('input', updateChromaKeyThreshold, false);\n  form['adjust'].addEventListener('input', updateBrightnessAndContarst, false);\n\n  // get initial vaklues from DOM\n  updateColorMixerValues();\n  updateChromaKeyThreshold();\n  updateBrightnessAndContarst();\n\n  canvas.width = width;\n  canvas.height = height;\n\n  video.addEventListener('play', copyToCanvas, false);\n\n  navigator.mediaDevices\n    .getUserMedia({ video: true })\n    .then(attachToVideo)\n    .catch((error) => console.log('error', error));\n}\n\nfunction attachToVideo(stream) {\n  video.srcObject = stream;\n}\n\nfunction copyToCanvas() {\n  if (video.paused || video.ended) return;\n  draw();\n  window.requestAnimationFrame(copyToCanvas);\n}\n\nfunction draw() {\n  offScreenContext.drawImage(video, 0, 0, width, height);\n  const srcImage = offScreenContext.getImageData(0, 0, width, height);\n  let dstImage;\n\n  if (effectsEnabled === false) {\n    dstImage = srcImage;\n    return context.putImageData(dstImage, 0, 0);\n  }\n\n  glfxTexture.loadContentsOf(video);\n  glfxCanvas\n    .draw(glfxTexture)\n    .brightnessContrast(adjustValues[0], adjustValues[1])\n    .hueSaturation(adjustValues[3], adjustValues[2])\n    .vibrance(adjustValues[4])\n    .update();\n\n  if (colorMode === 'grayscale') {\n    dstImage = pixelUtils.grayScale(srcImage, grayScaleStrategy, colorMixerValues);\n  } else if (colorMode === 'chroma-key') {\n    dstImage = pixelUtils.chromaColors(srcImage, chromaColor, chromaKeyThreshold);\n  } else {\n    dstImage = pixelUtils.mixColors(srcImage, colorMixerValues);\n  }\n\n  context.putImageData(dstImage, 0, 0);\n}\n\nfunction updateGrayScaleStrategy({ target }) {\n  grayScaleStrategy = target.value;\n}\n\nfunction updateColorMode({ target }) {\n  colorMode = target.value;\n  switch (colorMode) {\n    case 'color':\n      form['grayscale'].style.display = 'none';\n      form['chroma-key'].style.display = 'none';\n      form['color-channels'].style.display = 'flex';\n      break;\n    case 'grayscale':\n      form['chroma-key'].style.display = 'none';\n      form['grayscale'].style.display = 'flex';\n      form['color-channels'].style.display = 'flex';\n      break;\n    case 'chroma-key':\n      form['grayscale'].style.display = 'none';\n      form['color-channels'].style.display = 'none';\n      form['chroma-key'].style.display = 'flex';\n      break;\n    default:\n      throw Error(`Unhandled choice: \"${colorMode}\"`);\n  }\n}\n\nfunction updateColorMixerValues() {\n  colorMixerValues = colorMixerSliderElements.map(({ value }) => parseFloat(value, 10));\n}\n\nfunction onReset() {\n  setTimeout(() => {\n    updateColorMixerValues();\n    updateChromaKeyThreshold();\n    updateBrightnessAndContarst();\n    updateColorMode({ target: { value: 'color' } });\n    updateGrayScaleStrategy({ target: { value: 'mix' } });\n  }, 1);\n}\n\nfunction updateChromaColor({ target }) {\n  const red = target.value.slice(1, 3);\n  const green = target.value.slice(3, 5);\n  const blue = target.value.slice(5, 7);\n\n  const rgb = [red, green, blue].map((hex) => parseInt(hex, 16));\n  const hsl = colorUtils.rgbToHsl(...rgb);\n  chromaColor = hsl;\n}\n\nfunction updateChromaKeyThreshold() {\n  chromaKeyThreshold = chromaKeySliderElements.map(({ value }) => parseFloat(value, 10));\n}\n\nfunction updateBrightnessAndContarst() {\n  const values = adjustElements.map(({ value }) => parseInt(value, 10));\n  pixelUtils.setBrightnessAndContrast(values);\n  adjustValues = values.map((value) => value / 100);\n}\n\nfunction toggleEffects({ target }) {\n  effectsEnabled = target.checked;\n}\n"]}